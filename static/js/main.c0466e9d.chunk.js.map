{"version":3,"sources":["Components/AboutOut.js","Components/PopulationGrowthSimulator.js","App.js","serviceWorker.js","index.js"],"names":["AboutOut","state","react_default","a","createElement","Grid","Row","className","Col","xs","md","lg","onSubmit","this","handleSubmit","Component","PopulationGrowthSimulator","props","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","App","handleSelect","bind","assertThisInitialized","key","console","log","concat","setState","Tabs","activeKey","onSelect","id","Tab","eventKey","title","Components_PopulationGrowthSimulator","Components_AboutOut","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8TAoBeA,6MAhBXC,MAAQ,2EAEJ,OACIC,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACIH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAKC,UAAU,aACXL,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,GAAIC,GAAI,IACrBT,EAAAC,EAAAC,cAAA,uCACAF,EAAAC,EAAAC,cAAA,QAAMQ,SAAUC,KAAKC,yBARtBC,aC4BRC,cA1BX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAN,KAAAG,IACfE,EAAAC,OAAAE,EAAA,EAAAF,CAAAN,KAAAM,OAAAG,EAAA,EAAAH,CAAAH,GAAAO,KAAAV,KAAMI,KACDhB,MAAQ,GAFEiB,sHAWf,OACIhB,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACIH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAKC,UAAU,aACXL,EAAAC,EAAAC,cAACI,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,GAAIC,GAAI,IACrBT,EAAAC,EAAAC,cAAA,qDAhBgBW,aCwCzBS,cApCb,SAAAA,EAAYP,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAN,KAAAW,IACjBN,EAAAC,OAAAE,EAAA,EAAAF,CAAAN,KAAAM,OAAAG,EAAA,EAAAH,CAAAK,GAAAD,KAAAV,KAAMI,KACDQ,aAAeP,EAAKO,aAAaC,KAAlBP,OAAAQ,EAAA,EAAAR,CAAAD,IAEpBA,EAAKjB,MAAQ,CACX2B,IAAK,GALUV,4EASNU,GACXC,QAAQC,IAAR,YAAAC,OAAwBH,IACxBf,KAAKmB,SAAS,CAAEJ,yCAKhB,OACE1B,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OAEbL,EAAAC,EAAAC,cAAC6B,EAAA,EAAD,CACEC,UAAWrB,KAAKZ,MAAM2B,IACtBO,SAAUtB,KAAKY,aACfW,GAAG,kBAEHlC,EAAAC,EAAAC,cAACiC,EAAA,EAAD,CAAKC,SAAU,EAAGC,MAAM,wCACtBrC,EAAAC,EAAAC,cAACoC,EAAD,OAEFtC,EAAAC,EAAAC,cAACiC,EAAA,EAAD,CAAKC,SAAU,EAAGC,MAAM,YACtBrC,EAAAC,EAAAC,cAACqC,EAAD,gBA9BM1B,aCME2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9C,EAAAC,EAAAC,cAAC6C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c0466e9d.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Grid, Row, Col } from 'react-bootstrap';\r\n\r\nclass AboutOut extends Component {\r\n    state = {}\r\n    render() {\r\n        return (\r\n            <Grid>\r\n                <Row className=\"show-grid\">\r\n                    <Col xs={12} md={12} lg={12}>\r\n                        <h1>Calculadora de cr√©dito</h1>\r\n                        <form onSubmit={this.handleSubmit}>\r\n                        </form>\r\n                        </Col>\r\n                </Row>\r\n            </Grid>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AboutOut;","import React, { Component } from 'react';\r\nimport { Grid, Row, Col } from 'react-bootstrap';\r\n/* require('mathjs-simple-integral');\r\n */\r\nclass PopulationGrowthSimulator extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n    }\r\n\r\n    componentWillMount(){\r\n        /* console.log(\"math\", math); */\r\n        /* var math = math.import(require('mathjs-simple-integral'));\r\n        math.integral('x^2', 'x') */\r\n    }\r\n    render() {\r\n        return (\r\n            <Grid>\r\n                <Row className=\"show-grid\">\r\n                    <Col xs={12} md={12} lg={12}>\r\n                        <h1>I'm PopulationGrowthSimulator</h1>\r\n                        {/* <form onSubmit={this.handleSubmit}>\r\n                        </form> */}\r\n                        {}\r\n                    </Col>\r\n                </Row>\r\n            </Grid>\r\n        );\r\n    }\r\n}\r\n\r\nexport default PopulationGrowthSimulator;\r\n","import React, { Component } from 'react';\nimport { Tabs, Tab } from 'react-bootstrap';\nimport './App.css';\nimport AboutOut from './Components/AboutOut';\nimport PopulationGrowthSimulator from './Components/PopulationGrowthSimulator';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.handleSelect = this.handleSelect.bind(this);\n\n    this.state = {\n      key: 1\n    };\n  }\n\n  handleSelect(key) {\n    console.log(`selected ${key}`);\n    this.setState({ key });\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n\n        <Tabs\n          activeKey={this.state.key}\n          onSelect={this.handleSelect}\n          id=\"controlled-tab\"\n        >\n          <Tab eventKey={1} title=\"Simulador de Crecimiento Poblacional\">\n            <PopulationGrowthSimulator />\n          </Tab>\n          <Tab eventKey={2} title=\"Creditos\">\n            <AboutOut />\n          </Tab>\n        </Tabs>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}