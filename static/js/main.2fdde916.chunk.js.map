{"version":3,"sources":["Components/AboutOut.js","Components/PopulationGrowthSimulator.js","App.js","serviceWorker.js","index.js"],"names":["AboutOut","state","react_default","a","createElement","Grid","Row","className","Col","xs","md","lg","Component","PopulationGrowthSimulator","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","minTommss","minutes","sign","min","Math","floor","abs","sec","calcularCrecimientoEnTiempo","K","h","math","parse","concat","crecimientoEnTiempo","tiempo","eval","round","console","log","x","e","P","poblacionInicial","setState","prevState","objectSpread","poblacionFinal","calcularDiferencias","diferenciaPoblacion","poblacionEnDeterminadoTiempo","tiempoCrecimientoInicial","calcularCrecimientoEnCantidad","diferenciaTiempo","crecimientoEnCantidad","poblacion","tiempoFinal","data","labels","datasets","label","backgroundColor","borderColor","tiempo2","Intl","NumberFormat","maximumSignificantDigits","format","es","App","handleSelect","bind","assertThisInitialized","key","Tabs","activeKey","onSelect","id","Tab","eventKey","title","Components_PopulationGrowthSimulator","Components_AboutOut","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2fdde916.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Grid, Row, Col } from 'react-bootstrap';\n\nclass AboutOut extends Component {\n    state = {}\n    render() {\n        return (\n            <Grid>\n                <Row className=\"show-grid\">\n                    <Col xs={12} md={12} lg={12}>\n                        <h1>Creado por:</h1>\n                        <p>Camilo Quintero</p>\n                        <p>David Leandro Zuluaga</p>\n                        <p>Ramiro Andrés Bedoya E.</p>\n                        </Col>\n                </Row>\n            </Grid>\n        );\n    }\n}\n\nexport default AboutOut;","import React, { Component } from 'react';\nimport { Grid, Row, Col } from 'react-bootstrap';\nimport math from 'mathjs';\nimport { Bar } from 'react-chartjs-2';\n\nclass PopulationGrowthSimulator extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            poblacionInicial: 2500,\n            poblacionEnDeterminadoTiempo: 5000,\n            tiempoCrecimientoInicial: 1,\n            crecimientoEnTiempo: {\n                tiempo: 3.583333,\n                poblacionFinal: 0\n            },\n            crecimientoEnCantidad: {\n                poblacion: 50000,\n                tiempoFinal: 0\n            },\n            data: {\n                labels: [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\"],\n                datasets: [{\n                    label: \"Crecimiento Poblacional\",\n                    backgroundColor: 'rgb(255, 99, 132)',\n                    borderColor: 'rgb(255, 99, 132)',\n                    data: [0, 10, 5, 2, 20, 30, 45],\n                }]\n            }\n        };\n    }\n\n    minTommss = (minutes) => {\n        var sign = minutes < 0 ? \"-\" : \"\";\n        var min = Math.floor(Math.abs(minutes));\n        var sec = Math.floor((Math.abs(minutes) * 60) % 60);\n        return sign + (min < 10 ? \"0\" : \"\") + min + \":\" + (sec < 10 ? \"0\" : \"\") + sec;\n    }\n\n    calcularCrecimientoEnTiempo = (K) => {\n\n        let h = math.parse(`${K} * ${this.state.crecimientoEnTiempo.tiempo}`).eval({});\n        h = math.round(h, 4);\n        console.log(\"h\", h);\n        let x = math.parse('x^' + h).eval({ x: math.e });\n        x = math.round(x, 4)\n        console.log(\"x\", x);\n\n        let P = this.state.poblacionInicial * x;\n        P = math.round(P, 4);\n\n        this.setState(prevState => ({\n            crecimientoEnTiempo: {\n                ...prevState.crecimientoEnTiempo,\n                poblacionFinal: P\n            }\n        }))\n\n        console.log(\"Población en \" + this.state.crecimientoEnTiempo.poblacionFinal, P);\n\n    }\n\n    calcularDiferencias = () => {\n        const diferenciaPoblacion = this.state.poblacionEnDeterminadoTiempo / this.state.poblacionInicial;\n        console.log(\"diferencia poblaciónInicial vs población en un periodo del tiempo\", diferenciaPoblacion);\n        let K = math.log(diferenciaPoblacion, math.e) * this.state.tiempoCrecimientoInicial;\n        K = math.round(K, 4)\n        console.log(\"math.log 2: \", K);\n\n        return K;\n    }\n\n    calcularCrecimientoEnCantidad = (K) => {\n        // ¿Cuanto tardaría en completar N bacterias?\n        let diferenciaTiempo = this.state.crecimientoEnCantidad.poblacion / this.state.poblacionInicial;\n        let tiempo = math.log(diferenciaTiempo, math.e) / K;\n        console.log(\"tiempo\", tiempo);\n\n        this.setState(prevState => ({\n            crecimientoEnCantidad: {\n                ...prevState.crecimientoEnCantidad,\n                tiempoFinal: tiempo\n            }\n        }))\n        \n    }\n\n    componentWillMount() {\n        const K = this.calcularDiferencias();\n        this.calcularCrecimientoEnTiempo(K);\n        this.calcularCrecimientoEnCantidad(K);\n\n        /* const diferenciaPoblacion = this.state.poblacionEnDeterminadoTiempo / this.state.poblacionInicial;\n        console.log(\"diferencia poblaciónInicial vs población en un periodo del tiempo\", diferenciaPoblacion);\n        let K = math.log(diferenciaPoblacion, math.e) * this.state.tiempoCrecimientoInicial;\n        K = math.round(K, 4)\n        console.log(\"math.log 2: \", K);\n\n        let h = math.parse(`${K} * ${this.state.tiempoCrecimientoX}`).eval({});\n        h = math.round(h, 4);\n        console.log(\"h\", h);\n        let x = math.parse('x^' + h).eval({ x: math.e });\n        x = math.round(x, 4)\n        console.log(\"x\", x);\n\n        let P = this.state.poblacionInicial * x;\n        P = math.round(P, 4);\n\n        console.log(\"Población en \" + this.state.tiempoCrecimientoX, P); */\n\n\n    }\n    render() {\n        let tiempo2 = `población en tiempo ${this.minTommss(this.state.tiempoCrecimientoInicial)} ${this.state.tiempoCrecimientoInicial > 1 ? 'Horas' : 'Hora'}: ${new Intl.NumberFormat('en-IN', { maximumSignificantDigits: 3 }).format(this.state.poblacionEnDeterminadoTiempo)}`;\n/*\ncrecimientoEnTiempo: {\n                tiempo: 3.583333,\n                poblacionFinal: 0\n            },\n            crecimientoEnCantidad: {\n                poblacion: 50000,\n                tiempoFinal: 0\n            },\n*/\n        let data = this.state.data;\n        console.log(\"state\", this.state);\n        return (\n            <Grid>\n                <Row className=\"show-grid\">\n                    <Col xs={12} md={12} lg={12}>\n                        <h1>Simulador de Crecimiento poblacional de Bacterias</h1>\n                        <p>La población de una determinada comunidad de bacterias es de: 2.500, el número de bacterias se duplica despues de una hora.</p>\n                        <p>Población Inicial: {new Intl.NumberFormat('en-IN', { maximumSignificantDigits: 3 }).format(this.state.poblacionInicial)} Bacterias</p>\n                        <p>{tiempo2} Bacterias</p>\n                        <p>Población en {this.minTommss(this.state.crecimientoEnTiempo.tiempo)} {this.state.crecimientoEnTiempo.tiempo > 1 ? 'Horas' : 'Hora'}: {new Intl.NumberFormat('en-IN', { maximumSignificantDigits: 3 }).format(this.state.crecimientoEnTiempo.poblacionFinal)} </p>\n                        <p>¿Cuanto tardaría en completar {new Intl.NumberFormat('en-IN', { maximumSignificantDigits: 3 }).format(this.state.crecimientoEnCantidad.poblacion)} bacterias?</p>\n                        <p>tardaría {this.minTommss(this.state.crecimientoEnCantidad.tiempoFinal)} {this.state.crecimientoEnCantidad.tiempoFinal > 1 ? 'Horas' : 'Hora'}</p>\n                        <Bar data={data} />\n                    </Col>\n                </Row>\n            </Grid>\n        );\n    }\n}\n\nexport default PopulationGrowthSimulator;\n","import React, { Component } from 'react';\nimport { Tabs, Tab } from 'react-bootstrap';\nimport './App.css';\nimport AboutOut from './Components/AboutOut';\nimport PopulationGrowthSimulator from './Components/PopulationGrowthSimulator';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.handleSelect = this.handleSelect.bind(this);\n\n    this.state = {\n      key: 1\n    };\n  }\n\n  handleSelect(key) {\n    console.log(`selected ${key}`);\n    this.setState({ key });\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n\n        <Tabs\n          activeKey={this.state.key}\n          onSelect={this.handleSelect}\n          id=\"controlled-tab\"\n        >\n          <Tab eventKey={1} title=\"Simulador de Crecimiento Poblacional\">\n            <PopulationGrowthSimulator />\n          </Tab>\n          <Tab eventKey={2} title=\"Creditos\">\n            <AboutOut />\n          </Tab>\n        </Tabs>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}