{"version":3,"sources":["Components/AboutOut.js","Components/PopulationForm.js","Components/PopulationGrowthSimulator.js","App.js","serviceWorker.js","index.js"],"names":["AboutOut","state","react_default","a","createElement","Grid","Row","className","Col","xs","md","lg","Component","minTommss","minutes","sign","min","Math","floor","abs","sec","result","hours","substring","seconds","PopulationForm","_ref","handleSaveForm","initial","tiempoCrecimiento","tiempoCrecimientoInicial","crecimientoEnTiempo","tiempo","initialValues","poblacionInicial","poblacionEnDeterminadoTiempo","tiempoCrecimientoInicial_tiempo","tiempoCrecimientoInicial_horas","tiempoCrecimientoInicial_minutos","tiempoCrecimientoInicial_segundos","crecimientoEnTiempo_tiempo","crecimientoEnTiempo_horas","crecimientoEnTiempo_minutos","crecimientoEnTiempo_segundos","crecimientoEnCantidad_poblacion","crecimientoEnCantidad","poblacion","formik_esm","validate","values","errors","onSubmit","_ref2","setSubmitting","resetForm","console","log","_ref3","touched","handleChange","handleBlur","handleSubmit","isSubmitting","FormGroup","InputGroup","Addon","FormControl","type","id","name","onChange","onBlur","value","placeholder","disabled","PopulationGrowthSimulator","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","calcularCrecimientoEnTiempo","K","h","math","parse","concat","eval","round","x","e","P","setState","prevState","objectSpread","poblacionFinal","calcularDiferencias","diferenciaPoblacion","calcularCrecimientoEnCantidad","diferenciaTiempo","tiempoFinal","graficar","count","labels","dataFields","calcularCrecimientoEnIntervalos","push","datasetsLocal","label","backgroundColor","borderColor","data","reverse","datasets","parseInt","tiempo2","Intl","NumberFormat","maximumSignificantDigits","format","Components_PopulationForm","es","App","handleSelect","bind","assertThisInitialized","key","Tabs","activeKey","onSelect","Tab","eventKey","title","Components_PopulationGrowthSimulator","Components_AboutOut","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.64337fea.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Grid, Row, Col } from 'react-bootstrap';\n\nclass AboutOut extends Component {\n    state = {}\n    render() {\n        return (\n            <Grid>\n                <Row className=\"show-grid\">\n                    <Col xs={12} md={12} lg={12}>\n                        <h1>Creado por:</h1>\n                        <p>Camilo Quintero</p>\n                        <p>David Leandro Zuluaga</p>\n                        <p>Ramiro Andrés Bedoya E.</p>\n                        </Col>\n                </Row>\n            </Grid>\n        );\n    }\n}\n\nexport default AboutOut;","import React from 'react';\nimport { Formik } from 'formik';\nimport { FormGroup, InputGroup, FormControl, Col } from 'react-bootstrap';\n \nconst minTommss = (minutes) => {\n    var sign = minutes < 0 ? \"-\" : \"\";\n    var min = Math.floor(Math.abs(minutes));\n    var sec = Math.floor((Math.abs(minutes) * 60) % 60);\n    let result = sign + (min < 10 ? \"0\" : \"\") + min + \":\" + (sec < 10 ? \"0\" : \"\") + sec;\n\n    return {\n        hours : result.substring(0,2),\n        minutes: result.substring(3,5),\n        seconds : \"00\"\n    }\n}\n\nconst PopulationForm = ({ handleSaveForm, initial }) => {\n\n    let tiempoCrecimiento = minTommss(initial.tiempoCrecimientoInicial); \n    let crecimientoEnTiempo = minTommss(initial.crecimientoEnTiempo.tiempo); \n\n    let initialValues = {\n        poblacionInicial: initial.poblacionInicial,\n        poblacionEnDeterminadoTiempo: initial.poblacionEnDeterminadoTiempo,\n        tiempoCrecimientoInicial_tiempo: initial.tiempoCrecimientoInicial,\n        tiempoCrecimientoInicial_horas: tiempoCrecimiento.hours,\n        tiempoCrecimientoInicial_minutos: tiempoCrecimiento.minutes,\n        tiempoCrecimientoInicial_segundos: tiempoCrecimiento.seconds,\n        crecimientoEnTiempo_tiempo: initial.crecimientoEnTiempo.tiempo,\n        crecimientoEnTiempo_horas: crecimientoEnTiempo.hours,\n        crecimientoEnTiempo_minutos: crecimientoEnTiempo.minutes,\n        crecimientoEnTiempo_segundos: crecimientoEnTiempo.seconds,\n        crecimientoEnCantidad_poblacion: initial.crecimientoEnCantidad.poblacion\n    };\n    return (\n        <div>\n            <Formik\n                initialValues={initialValues}\n                validate={values => {\n                    let errors = {};\n                    if (!values.poblacionInicial) {\n                        errors.poblacionInicial = 'Required';\n                    }\n\n                    if (!values.poblacionEnDeterminadoTiempo) {\n                        errors.poblacionEnDeterminadoTiempo = 'Required';\n                    }\n\n                    if (!values.tiempoCrecimientoInicial_tiempo) {\n                        errors.tiempoCrecimientoInicial_tiempo = 'Required';\n                    }\n\n                    if (values.tiempoCrecimientoInicial_horas  === '') {\n                        errors.tiempoCrecimientoInicial_horas = 'Required';\n                    }\n\n                    if (values.tiempoCrecimientoInicial_minutos === '') {\n                        errors.tiempoCrecimientoInicial_minutos = 'Required';\n                    }\n\n                    if (!values.crecimientoEnTiempo_tiempo) {\n                        errors.crecimientoEnTiempo_tiempo = 'Required';\n                    }\n\n                    if (values.crecimientoEnTiempo_horas  === '') {\n                        errors.crecimientoEnTiempo_horas = 'Required';\n                    }\n\n                    if (values.crecimientoEnTiempo_minutos === '') {\n                        errors.crecimientoEnTiempo_minutos = 'Required';\n                    }\n\n                    if (!values.crecimientoEnCantidad_poblacion) {\n                        errors.crecimientoEnCantidad_poblacion = 'Required';\n                    }\n\n                    return errors;\n                }}\n                onSubmit={(values, { setSubmitting, resetForm }) => {\n                    console.log(\"submitting ...\");\n                    setSubmitting(false);\n                    handleSaveForm(values);\n\n                    /* resetForm(initialValues); */\n\n                }}\n            >\n                {({\n                    values,\n                    errors,\n                    touched,\n                    handleChange,\n                    handleBlur,\n                    handleSubmit,\n                    isSubmitting,\n                }) => (\n\n                        <form onSubmit={handleSubmit}>\n                            <FormGroup>\n                                <InputGroup>\n                                    <InputGroup.Addon>Población Inicial de </InputGroup.Addon>\n                                    <FormControl type=\"number\" id=\"poblacionInicial\" name=\"poblacionInicial\"\n                                        onChange={handleChange} onBlur={handleBlur} value={values.poblacionInicial}\n                                        placeholder=\"Digita la cantidad inicial de Población\" />\n                                    <InputGroup.Addon>Bacterias</InputGroup.Addon>\n                                    <span >{errors.poblacionInicial && touched.poblacionInicial && errors.poblacionInicial}</span>\n\n                                </InputGroup>\n                            </FormGroup>\n                            <FormGroup>\n                                <InputGroup>\n                                    <InputGroup.Addon>Tiempo 1 (HH:MM:SS)</InputGroup.Addon>\n                                    <Col xs={10} md={10} lg={10}>\n                                        <Col xs={4} md={4} lg={4}>\n                                            <FormControl type=\"number\" id=\"tiempoCrecimientoInicial_horas\" name=\"tiempoCrecimientoInicial_horas\"\n                                                onChange={handleChange} onBlur={handleBlur} value={values.tiempoCrecimientoInicial_horas}\n                                                placeholder=\"Horas\" /></Col>\n                                        <Col xs={4} md={4} lg={4}>\n                                            <FormControl type=\"number\" id=\"tiempoCrecimientoInicial_minutos\" name=\"tiempoCrecimientoInicial_minutos\"\n                                                onChange={handleChange} onBlur={handleBlur} value={values.tiempoCrecimientoInicial_minutos}\n                                                placeholder=\"Minutos\" /></Col>\n                                        <Col xs={4} md={4} lg={4}>\n                                            <FormControl type=\"number\" id=\"tiempoCrecimientoInicial_segundos\" name=\"tiempoCrecimientoInicial_segundos\"\n                                                onChange={handleChange} onBlur={handleBlur} value={values.tiempoCrecimientoInicial_segundos}\n                                                placeholder=\"Segundos\" /></Col>\n                                    </Col>\n                                    <span >{errors.tiempoCrecimientoInicial_tiempo && touched.tiempoCrecimientoInicial_horas && touched.tiempoCrecimientoInicial_minutos && touched.tiempoCrecimientoInicial_segundos}</span>\n                                </InputGroup>\n                            </FormGroup>\n                            <FormGroup>\n                                <InputGroup>\n                                    <InputGroup.Addon>Población En Tiempo 1</InputGroup.Addon>\n                                    <FormControl type=\"number\" id=\"poblacionEnDeterminadoTiempo\" name=\"poblacionEnDeterminadoTiempo\"\n                                        onChange={handleChange} onBlur={handleBlur} value={values.poblacionEnDeterminadoTiempo}\n                                        placeholder=\"Digita La población Tiempo 1\" />\n                                </InputGroup>\n                            </FormGroup>\n                            <hr></hr>\n                            <FormGroup>\n                                <InputGroup>\n                                    <InputGroup.Addon>¿Cuanta población crecerá en el siguiente tiempo: </InputGroup.Addon>\n                                        <Col xs={12} md={6} lg={4}>\n                                            <FormControl type=\"number\" id=\"crecimientoEnTiempo_horas\" name=\"crecimientoEnTiempo_horas\"\n                                                onChange={handleChange} onBlur={handleBlur} value={values.crecimientoEnTiempo_horas}\n                                                placeholder=\"Horas\" /></Col>\n                                        <Col xs={12} md={6} lg={4}>\n                                            <FormControl type=\"number\" id=\"crecimientoEnTiempo_minutos\" name=\"crecimientoEnTiempo_minutos\"\n                                                onChange={handleChange} onBlur={handleBlur} value={values.crecimientoEnTiempo_minutos}\n                                                placeholder=\"Minutos\" /></Col>\n                                        <Col xs={12} md={6} lg={4}>\n                                            <FormControl type=\"number\" id=\"crecimientoEnTiempo_segundos\" name=\"crecimientoEnTiempo_segundos\"\n                                                onChange={handleChange} onBlur={handleBlur} value={values.crecimientoEnTiempo_segundos}\n                                                placeholder=\"Segundos\" /></Col>\n                                    <InputGroup.Addon> (HH:MM:SS)?</InputGroup.Addon>\n                                    <span >{errors.crecimientoEnTiempo_tiempo && touched.crecimientoEnTiempo_horas && touched.crecimientoEnTiempo_minutos && touched.crecimientoEnTiempo_segundos}</span>\n                                </InputGroup>\n                            </FormGroup>\n                            <FormGroup>\n                                <InputGroup>\n                                    <InputGroup.Addon>¿Cuanto tardaría en completar</InputGroup.Addon>\n                                    <FormControl type=\"number\" id=\"crecimientoEnCantidad_poblacion\" name=\"crecimientoEnCantidad_poblacion\"\n                                        onChange={handleChange} onBlur={handleBlur} value={values.crecimientoEnCantidad_poblacion}\n                                        placeholder=\"Digita La población Tiempo 1\" />\n                                    <InputGroup.Addon>bacterias?</InputGroup.Addon>\n                                </InputGroup>\n                            </FormGroup>\n                            <button type=\"submit\" disabled={isSubmitting} >Actualizar</button>\n\n                        </form>\n                    )}\n            </Formik>\n        </div>\n    );\n}\n\nexport default PopulationForm;","import React, { Component } from 'react';\nimport { Grid, Row, Col } from 'react-bootstrap';\n\nimport math from 'mathjs';\nimport { Bar } from 'react-chartjs-2';\nimport PopulationForm from './PopulationForm';\n\nclass PopulationGrowthSimulator extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            poblacionInicial: 2500,\n            poblacionEnDeterminadoTiempo: 5000,\n            tiempoCrecimientoInicial: 1,\n            crecimientoEnTiempo: {\n                tiempo: 3.583333,\n                poblacionFinal: 0\n            },\n            crecimientoEnCantidad: {\n                poblacion: 80000,\n                tiempoFinal: 0\n            },\n            data: {\n                labels: [3.583333, 2.583333, 1.583333, 0.5833330000000001, -0.4166669999999999],\n                datasets: [{\n                    label: \"Crecimiento Poblacional\",\n                    backgroundColor: 'rgb(255, 99, 132)',\n                    borderColor: 'rgb(255, 99, 132)',\n                    data: [0, 10, 5, 2, 20],\n                }]\n            }\n        };\n    }\n\n    minTommss = (minutes) => {\n        var sign = minutes < 0 ? \"-\" : \"\";\n        var min = Math.floor(Math.abs(minutes));\n        var sec = Math.floor((Math.abs(minutes) * 60) % 60);\n        return sign + (min < 10 ? \"0\" : \"\") + min + \":\" + (sec < 10 ? \"0\" : \"\") + sec;\n    }\n\n    calcularCrecimientoEnTiempo = (K) => {\n\n        let h = math.parse(`${K} * ${this.state.crecimientoEnTiempo.tiempo}`).eval({});\n        h = math.round(h, 4);\n        let x = math.parse('x^' + h).eval({ x: math.e });\n        x = math.round(x, 4)\n\n        let P = this.state.poblacionInicial * x;\n        P = math.round(P, 4);\n\n        this.setState(prevState => ({\n            crecimientoEnTiempo: {\n                ...prevState.crecimientoEnTiempo,\n                poblacionFinal: P\n            }\n        }));\n    }\n\n    calcularDiferencias = () => {\n        const diferenciaPoblacion = this.state.poblacionEnDeterminadoTiempo / this.state.poblacionInicial;\n        /* console.log(\"diferencia poblaciónInicial vs población en un periodo del tiempo\", diferenciaPoblacion); */\n        let K = math.log(diferenciaPoblacion, math.e) * this.state.tiempoCrecimientoInicial;\n        K = math.round(K, 4)\n\n        return K;\n    }\n\n    calcularCrecimientoEnCantidad = (K) => {\n        // ¿Cuanto tardaría en completar N bacterias?\n        let diferenciaTiempo = this.state.crecimientoEnCantidad.poblacion / this.state.poblacionInicial;\n        let tiempo = math.log(diferenciaTiempo, math.e) / K;\n\n        let poblacion = this.state.crecimientoEnCantidad.poblacion;\n        console.log(`¿Cuanto tardaría en completar ${poblacion} bacterias?`, tiempo);\n\n        this.setState(prevState => ({\n            crecimientoEnCantidad: {\n                ...prevState.crecimientoEnCantidad,\n                tiempoFinal: tiempo\n            }\n        }))\n\n    }\n\n    componentWillMount() {\n        const K = this.calcularDiferencias();\n        this.calcularCrecimientoEnTiempo(K);\n        this.calcularCrecimientoEnCantidad(K);\n\n        this.graficar(K);\n\n    }\n\n    graficar = (K) => {\n\n        let crecimientoEnTiempo = this.state.crecimientoEnTiempo.tiempo;\n        let tiempoCrecimientoInicial = this.state.tiempoCrecimientoInicial;\n\n        let count = crecimientoEnTiempo;\n        let labels = [];\n        \n        let fistCalc = this.calcularCrecimientoEnIntervalos(K, crecimientoEnTiempo);\n        let dataFields = [fistCalc];\n        labels.push(this.minTommss(count));\n\n        while (count >= 0) {\n            if (crecimientoEnTiempo > tiempoCrecimientoInicial) {\n                count--;\n                if(count < 0){\n                    labels.push(this.minTommss(0));\n                }else {\n                    labels.push(this.minTommss(count));\n                }\n                \n                let poblacion = this.calcularCrecimientoEnIntervalos(K, count);\n\n                dataFields.push(poblacion);\n            }\n        }\n\n        let datasetsLocal = [{\n            label: \"Crecimiento Poblacional\",\n            backgroundColor: 'rgb(255, 99, 132)',\n            borderColor: 'rgb(255, 99, 132)',\n            data: dataFields.reverse(),\n        }];\n        console.log(\"data\", datasetsLocal);\n\n        this.setState(prevState => ({\n            data: {\n                ...prevState.data,\n                labels: labels.reverse(),\n                datasets: datasetsLocal\n            }\n        }))\n\n\n        console.log(\"state\", this.state)\n    }\n\n    calcularCrecimientoEnIntervalos = (K, tiempo) => {\n        let h = math.parse(`${K} * ${tiempo}`).eval({});\n        h = math.round(h, 4);\n        let x = math.parse('x^' + h).eval({ x: math.e });\n        x = math.round(x, 4)\n\n        let P = this.state.poblacionInicial * x;\n        P = math.round(P, 4);\n        return P\n    }\n\n    handleSaveForm = (values) => {\n        var tiempoCrecimientoInicial = parseInt(values.tiempoCrecimientoInicial_horas) + (parseInt(values.tiempoCrecimientoInicial_minutos) / 60) + (parseInt(values.tiempoCrecimientoInicial_segundos) / 3600);\n        var crecimientoEnTiempo = parseInt(values.crecimientoEnTiempo_horas) + (parseInt(values.crecimientoEnTiempo_minutos) / 60) + (parseInt(values.crecimientoEnTiempo_segundos) / 3600);\n\n\n        this.setState(prevState => ({\n            poblacionInicial: values.poblacionInicial,\n            poblacionEnDeterminadoTiempo: values.poblacionEnDeterminadoTiempo,\n            tiempoCrecimientoInicial: tiempoCrecimientoInicial,\n            crecimientoEnCantidad: {\n                ...prevState.crecimientoEnCantidad,\n                poblacion: values.crecimientoEnCantidad_poblacion\n            },\n            crecimientoEnTiempo: {\n                ...prevState.crecimientoEnTiempo,\n                tiempo: crecimientoEnTiempo\n            }\n        }));\n\n        const K = this.calcularDiferencias();\n        this.calcularCrecimientoEnTiempo(K);\n        this.calcularCrecimientoEnCantidad(K);\n\n    }\n\n    render() {\n        let tiempo2 = `población en tiempo ${this.minTommss(this.state.tiempoCrecimientoInicial)} ${this.state.tiempoCrecimientoInicial > 1 ? 'Horas' : 'Hora'}: ${new Intl.NumberFormat('en-IN', { maximumSignificantDigits: 3 }).format(this.state.poblacionEnDeterminadoTiempo)}`;\n\n        let data = this.state.data;\n        let initialValues = this.state;\n\n        return (\n            <Grid>\n                <Row className=\"show-grid\">\n                    <Col xs={12} md={12} lg={12}>\n                        <h2>Simulador de Crecimiento poblacional de Bacterias</h2>\n                        <hr></hr>\n                        <PopulationForm handleSaveForm={this.handleSaveForm} initial={initialValues} />\n                        <p>La población de una determinada comunidad de bacterias es de: {new Intl.NumberFormat('en-IN', { maximumSignificantDigits: 3 }).format(this.state.poblacionInicial)}, el número de bacterias se duplica despues de una hora.</p>\n                        <p>Población Inicial: {new Intl.NumberFormat('en-IN', { maximumSignificantDigits: 3 }).format(this.state.poblacionInicial)} Bacterias</p>\n                        <p>{tiempo2} Bacterias</p>\n                        <p>Población en {this.minTommss(this.state.crecimientoEnTiempo.tiempo)} {this.state.crecimientoEnTiempo.tiempo > 1 ? 'Horas' : 'Hora'}: {new Intl.NumberFormat('en-IN', { maximumSignificantDigits: 3 }).format(this.state.crecimientoEnTiempo.poblacionFinal)} Bacterias</p>\n                        <p>¿Cuanto tardaría en completar {new Intl.NumberFormat('en-IN', { maximumSignificantDigits: 3 }).format(this.state.crecimientoEnCantidad.poblacion)} bacterias?</p>\n                        <p>tardaría {this.minTommss(this.state.crecimientoEnCantidad.tiempoFinal)} {this.state.crecimientoEnCantidad.tiempoFinal > 1 ? 'Horas' : 'Hora'}</p>\n                        <Bar data={data} />\n                    </Col>\n                </Row>\n            </Grid>\n        );\n    }\n}\n\nexport default PopulationGrowthSimulator;\n","import React, { Component } from 'react';\nimport { Tabs, Tab } from 'react-bootstrap';\nimport './App.css';\nimport AboutOut from './Components/AboutOut';\nimport PopulationGrowthSimulator from './Components/PopulationGrowthSimulator';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.handleSelect = this.handleSelect.bind(this);\n\n    this.state = {\n      key: 1\n    };\n  }\n\n  handleSelect(key) {\n    console.log(`selected ${key}`);\n    this.setState({ key });\n  }\n\n\n  render() {\n    return (\n      <div className=\"App\">\n\n        <Tabs\n          activeKey={this.state.key}\n          onSelect={this.handleSelect}\n          id=\"controlled-tab\"\n        >\n          <Tab eventKey={1} title=\"Simulador de Crecimiento Poblacional\">\n            <PopulationGrowthSimulator />\n          </Tab>\n          <Tab eventKey={2} title=\"Creditos\">\n            <AboutOut />\n          </Tab>\n        </Tabs>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}